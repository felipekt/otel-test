<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <springProperty scope="context" name="appName"
    source="arsenal.library.core.log.context-name"
    defaultValue="@project.artifactId@" />
    
  <springProperty scope="context" name="stackDepth"
    source="arsenal.library.core.log.stack-depth" defaultValue="30" />
    
  <springProperty scope="context" name="kafkaAddress"
    source="otel.kafka.address"
    defaultValue="localhost" />
    
  <springProperty scope="context" name="kafkaPort"
    source="otel.kafka.port"
    defaultValue="9092" />
    
    <springProperty scope="context" name="kafkaTopic"
    source="otel.kafka.topic"
    defaultValue="spans" />
    
  <springProfile name="!local">
    <contextName>${appName}</contextName>
    <include
      resource="org/springframework/boot/logging/logback/default.xml" />

    <!-- =========================================================================================================== -->
    <!-- Appenders -->
    <!-- =========================================================================================================== -->

	<conversionRule conversionWord="color"
		converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
      <encoder>
        <pattern>%color(%date{HH:mm:ss.SSS}){faint}[%color(%8.8thread){magenta}] %color(%-5level) %color(%40.40logger{39}){cyan} %color(%X{traceId}){red} %color(:) %color(%X{X-B3-TraceId}){yellow} %color(:) %color(%X{X-B3-SpanId}){green} %color(:) %message%n%ex{${stackDepth}}</pattern>
      </encoder>
    </appender>
    
    <appender name="kafkaAppender" class="com.github.danielwegener.logback.kafka.KafkaAppender">
        <encoder>
                <pattern>%msg</pattern>
        </encoder>
        <topic>${kafkaTopic}</topic>
        <keyingStrategy class="com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy" />
        <deliveryStrategy class="com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy" />
        
        <producerConfig>bootstrap.servers=${kafkaAddress}:${kafkaPort}</producerConfig>

        <!-- this is the fallback appender if kafka is not available. -->
        <appender-ref ref="STDOUT" />
    </appender>

    <appender name="DEFAULTOUTPUT"
      class="ch.qos.logback.classic.AsyncAppender">
      <appender-ref ref="STDOUT" />
      <queueSize>500</queueSize>
      <discardingThreshold>0</discardingThreshold>
    </appender>

    <!-- =========================================================================================================== -->
    <!-- Loggers -->
    <!-- =========================================================================================================== -->

    <root level="INFO">
      <appender-ref ref="DEFAULTOUTPUT" />
      <appender-ref ref="kafkaAppender" />
    </root>
  </springProfile>
</configuration>